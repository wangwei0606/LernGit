--此代码由编辑器生成
--add by editor
#ClassName=SimpleClass(UIDisplay)

--构造函数
function #ClassName:__init(obj, parent,args)
    self:build(obj, #ClassName, parent)
	self.args=args
end

--初始化自身成员变量
function #ClassName:__init_self()
        --定义点击事件处理方法
        self._click_event=nil
		self.args=nil
        --定义一些需要控制的控件
        --定义规则如下
        --self.控件名='none' --'none' 是一个标识，标识这个变量需要自动注入

end

--属性和控件事件绑定完成后调用此方法
--整个ui生命周期只执行一次
function #ClassName:initLayout()
    --事件绑定
    self:bindListener()
end
function #ClassName:bindListener()
    --绑定自身点击事件
    local obj = self:getRoot().gameObject
    local listener = EventListener:get(obj)
    listener.onClick = Bind(self.clickSelf, self)
end
--点击自身时的响应事件
function #ClassName:clickSelf(event)
        if self._click_event~=nil and type(self._click_event)=='function' then
            self._click_event(self)
        end
end
--注册点击事件
function #ClassName:setClickEvent(func)
    self._click_event=func
end

--窗口打开时调用
function #ClassName:onOpen()
end

--在窗口关闭的时候调用
function #ClassName:onClose()

end

--显示的时候调用
function #ClassName:onShowView()
end

--隐藏的时候调用
function #ClassName:onHideView()
end

--销毁的时候调用
--依赖自动注入的变量不需要在此销毁，基类会做对于的回收操作
--在脚本中引用 c# 层次的组件 或gameobj 都在此释放引用
function #ClassName:onDispose()

end


--自动注册事件响应方法
--命名规则 控件名_事件名_event
--目前支持的事件类型有 click,down,enter,exit,up,drag,beginDrag,endDrag,repeat
--function #ClassName:控件名_事件名_event(event)
--end

